{
  "api/GG.Singletons.html": {
    "href": "api/GG.Singletons.html",
    "title": "Namespace GG.Singletons | Documentation",
    "keywords": "Namespace GG.Singletons Classes Singleton<T> UnitySingleton<T> UnitySingletonPersistent<T>"
  },
  "api/GG.Singletons.Singleton-1.html": {
    "href": "api/GG.Singletons.Singleton-1.html",
    "title": "Class Singleton<T> | Documentation",
    "keywords": "Class Singleton<T> Inheritance Object Singleton<T> Namespace : GG.Singletons Assembly : GG.Singletons.dll Syntax public class Singleton<T> where T : Component Type Parameters Name Description T Properties | Improve this Doc View Source Exists Check if the instance exists within the opened scenes Declaration public bool Exists { get; } Property Value Type Description Boolean | Improve this Doc View Source Get Declaration public T Get { get; set; } Property Value Type Description T Methods | Improve this Doc View Source ValidateInstance(Boolean) Declaration public void ValidateInstance(bool createIfNeeded = false) Parameters Type Name Description Boolean createIfNeeded"
  },
  "api/GG.Singletons.UnitySingleton-1.html": {
    "href": "api/GG.Singletons.UnitySingleton-1.html",
    "title": "Class UnitySingleton<T> | Documentation",
    "keywords": "Class UnitySingleton<T> Inheritance Object UnitySingleton<T> Namespace : GG.Singletons Assembly : GG.Singletons.dll Syntax public class UnitySingleton<T> : MonoBehaviour where T : Component Type Parameters Name Description T Properties | Improve this Doc View Source Exists Check if the instance exists within the opened scenes Declaration public static bool Exists { get; } Property Value Type Description Boolean | Improve this Doc View Source Instance Declaration public static T Instance { get; set; } Property Value Type Description T Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source OnDestroy() Declaration protected virtual void OnDestroy() | Improve this Doc View Source ValidateInstance(Boolean) Declaration public static void ValidateInstance(bool createIfNeeded = false) Parameters Type Name Description Boolean createIfNeeded"
  },
  "api/GG.Singletons.UnitySingletonPersistent-1.html": {
    "href": "api/GG.Singletons.UnitySingletonPersistent-1.html",
    "title": "Class UnitySingletonPersistent<T> | Documentation",
    "keywords": "Class UnitySingletonPersistent<T> Inheritance Object UnitySingletonPersistent<T> Namespace : GG.Singletons Assembly : GG.Singletons.dll Syntax public class UnitySingletonPersistent<T> : MonoBehaviour where T : Component Type Parameters Name Description T Properties | Improve this Doc View Source Exists Check if the instance exists within the opened scenes Declaration public static bool Exists { get; } Property Value Type Description Boolean | Improve this Doc View Source Instance Declaration public static T Instance { get; } Property Value Type Description T Methods | Improve this Doc View Source Awake() Declaration protected virtual void Awake() | Improve this Doc View Source OnDestroy() Declaration protected virtual void OnDestroy() | Improve this Doc View Source ValidateInstance(Boolean) Declaration public static void ValidateInstance(bool createIfNeeded = false) Parameters Type Name Description Boolean createIfNeeded"
  },
  "index.html": {
    "href": "index.html",
    "title": "Usage | Documentation",
    "keywords": "Usage All singleton scripts are designed to be used within your own classes. Simply extend from the base class and your singleton logic will be available. The class is set up to find the singleton object in a scene regardless if the Gameobject is on or not, if it can not find one it will create it. If multiple singleton classes are loaded the last one to load will be destroyed. Accessible though MyClass.Instance Unity Singleton Scene singleton that will get cleaned up when the scene it is in gets destroyed. Public class SceneSingleton : UnitySingleton<SceneSingleton> { //your class here } Unity singleton Persistent A Persistant singleton that once spawned will not auto get cleaned up until after the game has unloaded Public class PersistentSingleton : UnitySingletonPersistent<SceneSingleton> { //your class here } Singleton A Version of the single that does not work from inheriting a script, Useful when you need to work within another inheritance sequence. The main difference here is that its accessible though Accessible though MyClass.Instance.Get Public class MyClass : SomeOtherClass { public Singleton<MyClass> Instance = new Singleton<MyClass>(); //your class here } Methods Instance Singleton way to access the Object ValidateInstance Checks that the singleton exists and stores its variable for future access. Option parameter to create the instance if it does not, this is defaulted to true. Exists Checks if the singleton exists without creating it in the process."
  }
}